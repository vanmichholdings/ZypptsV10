#!/usr/bin/env python3
"""
Admin Security Setup Script
Run this script to configure admin security settings
"""

import os
import secrets
import string
import sys
from pathlib import Path

def generate_secure_key(length=32):
    """Generate a secure random key"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def setup_admin_security():
    """Setup admin security configuration"""
    print("🔐 Admin Security Setup")
    print("=" * 50)
    
    # Get current IP address
    import socket
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        print(f"📡 Detected local IP: {local_ip}")
    except:
        local_ip = "127.0.0.1"
        print(f"📡 Using default IP: {local_ip}")
    
    # Generate secure keys
    admin_secret_key = generate_secure_key(32)
    flask_secret_key = generate_secure_key(32)
    
    print("\n🔑 Generated Security Keys:")
    print(f"Admin Secret Key: {admin_secret_key}")
    print(f"Flask Secret Key: {flask_secret_key}")
    
    # Get admin email
    admin_email = input("\n📧 Enter admin email (default: test@zyppts.com): ").strip()
    if not admin_email:
        admin_email = "test@zyppts.com"
    
    # Get additional IP addresses
    additional_ips = input("\n🌐 Enter additional IP addresses (comma-separated, optional): ").strip()
    ip_whitelist = [local_ip]
    if additional_ips:
        ip_whitelist.extend([ip.strip() for ip in additional_ips.split(',')])
    
    # Create .env file
    env_content = f"""# Admin Security Configuration
# Generated by setup_admin_security.py

# Admin Access Control
ADMIN_IP_WHITELIST={','.join(ip_whitelist)}
ADMIN_ALLOWED_EMAILS={admin_email}
ADMIN_SECRET_KEY={admin_secret_key}
ADMIN_SESSION_TIMEOUT=3600
ADMIN_RATE_LIMIT=100
ADMIN_MAX_LOGIN_ATTEMPTS=5
ADMIN_LOCKOUT_DURATION=900

# Flask Security
SECRET_KEY={flask_secret_key}
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Strict

# Database (update with your production database)
DATABASE_URL=sqlite:///app.db

# Email Configuration
MAIL_USERNAME=your-email@domain.com
MAIL_PASSWORD=your-email-password

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
"""
    
    # Write .env file
    env_file = Path('.env')
    if env_file.exists():
        backup_file = Path('.env.backup')
        env_file.rename(backup_file)
        print(f"💾 Backed up existing .env to .env.backup")
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"✅ Created .env file with security configuration")
    
    # Create logs directory
    logs_dir = Path('logs')
    logs_dir.mkdir(exist_ok=True)
    
    # Set up log files
    log_files = ['admin_actions.log', 'admin_security.log', 'zyppts.log']
    for log_file in log_files:
        log_path = logs_dir / log_file
        if not log_path.exists():
            log_path.touch()
            print(f"📝 Created log file: {log_path}")
    
    # Set proper permissions
    try:
        os.chmod('.env', 0o600)  # Read/write for owner only
        os.chmod('logs', 0o750)  # Read/write/execute for owner, read/execute for group
        for log_file in log_files:
            os.chmod(logs_dir / log_file, 0o640)  # Read/write for owner, read for group
        print("🔒 Set secure file permissions")
    except Exception as e:
        print(f"⚠️ Could not set file permissions: {e}")
    
    print("\n🎉 Admin Security Setup Complete!")
    print("\n📋 Next Steps:")
    print("1. Review and update the .env file with your production settings")
    print("2. Set up HTTPS/SSL certificates")
    print("3. Configure your web server (Nginx/Apache)")
    print("4. Set up firewall rules")
    print("5. Configure database security")
    print("6. Set up monitoring and logging")
    print("\n📖 See Backend/deployment_security.md for detailed instructions")
    
    return True

def check_security_status():
    """Check current security configuration"""
    print("🔍 Security Status Check")
    print("=" * 30)
    
    # Check .env file
    env_file = Path('.env')
    if env_file.exists():
        print("✅ .env file exists")
        with open('.env', 'r') as f:
            content = f.read()
            if 'ADMIN_SECRET_KEY' in content:
                print("✅ Admin secret key configured")
            if 'ADMIN_IP_WHITELIST' in content:
                print("✅ IP whitelist configured")
            if 'ADMIN_ALLOWED_EMAILS' in content:
                print("✅ Admin emails configured")
    else:
        print("❌ .env file not found")
    
    # Check logs directory
    logs_dir = Path('logs')
    if logs_dir.exists():
        print("✅ Logs directory exists")
        log_files = ['admin_actions.log', 'admin_security.log']
        for log_file in log_files:
            if (logs_dir / log_file).exists():
                print(f"✅ {log_file} exists")
            else:
                print(f"❌ {log_file} missing")
    else:
        print("❌ Logs directory missing")
    
    # Check file permissions
    try:
        if env_file.exists():
            mode = oct(env_file.stat().st_mode)[-3:]
            if mode == '600':
                print("✅ .env file has secure permissions")
            else:
                print(f"⚠️ .env file permissions: {mode} (should be 600)")
    except Exception as e:
        print(f"⚠️ Could not check file permissions: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "check":
        check_security_status()
    else:
        setup_admin_security() 